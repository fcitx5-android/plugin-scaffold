pluginManagement {
    repositories {
        maven ("https://maven.libido.workers.dev/fcitx5-android/fcitx5-android/")
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        maven ("https://maven.libido.workers.dev/fcitx5-android/fcitx5-android/")
        google()
        mavenCentral()
    }
    versionCatalogs {
        create("libs") {
            plugin("kotlin","org.jetbrains.kotlin.android").version("{{kotlin_version}}")

            version("android","{{android_version}}")
            plugin("android.app","com.android.application").versionRef("android")
            plugin("android.library","com.android.library").versionRef("android")

            plugin("aboutlibraries", "com.mikepenz.aboutlibraries.plugin").version("{{aboutlibraries_version}}")
            library("android.desugarJDKLibs", "com.android.tools", "desugar_jdk_libs").version("{{desugarJDKLibs_version}}")

            version("main", "{{main_version}}")

            fun pluginA(id: String) = plugin("fcitx5-android.$id", "org.fcitx.fcitx5.android.$id").versionRef("main")
            pluginA("app-convention")
            pluginA("lib-convention")
            pluginA("plugin-app-convention")
            pluginA("build-metadata")
            pluginA("cmake-dir")
            pluginA("data-descriptor")
            pluginA("fcitx-component")
            pluginA("fcitx-headers")
            pluginA("native-app-convention")
            pluginA("native-lib-convention")

            fun libraryA(id: String) = library("fcitx5-android.$id", "org.fcitx.fcitx5.android.lib", id).versionRef("main")
            libraryA("plugin_base")
            libraryA("common")
        }
    }
}
rootProject.name = "{{project_name}}"
include(":app")
